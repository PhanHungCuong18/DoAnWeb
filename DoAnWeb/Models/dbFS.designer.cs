#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DoAnWeb.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FlowerStore")]
	public partial class dbFSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSanPhan(SanPhan instance);
    partial void UpdateSanPhan(SanPhan instance);
    partial void DeleteSanPhan(SanPhan instance);
    partial void InsertMauSac(MauSac instance);
    partial void UpdateMauSac(MauSac instance);
    partial void DeleteMauSac(MauSac instance);
    partial void InsertLoaiSP(LoaiSP instance);
    partial void UpdateLoaiSP(LoaiSP instance);
    partial void DeleteLoaiSP(LoaiSP instance);
    partial void InsertKhanhHang(KhanhHang instance);
    partial void UpdateKhanhHang(KhanhHang instance);
    partial void DeleteKhanhHang(KhanhHang instance);
    partial void InsertDonDatHang(DonDatHang instance);
    partial void UpdateDonDatHang(DonDatHang instance);
    partial void DeleteDonDatHang(DonDatHang instance);
    partial void InsertChuDe(ChuDe instance);
    partial void UpdateChuDe(ChuDe instance);
    partial void DeleteChuDe(ChuDe instance);
    partial void InsertCTDatHang(CTDatHang instance);
    partial void UpdateCTDatHang(CTDatHang instance);
    partial void DeleteCTDatHang(CTDatHang instance);
    #endregion
		
		public dbFSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FlowerStoreConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbFSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbFSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SanPhan> SanPhans
		{
			get
			{
				return this.GetTable<SanPhan>();
			}
		}
		
		public System.Data.Linq.Table<MauSac> MauSacs
		{
			get
			{
				return this.GetTable<MauSac>();
			}
		}
		
		public System.Data.Linq.Table<LoaiSP> LoaiSPs
		{
			get
			{
				return this.GetTable<LoaiSP>();
			}
		}
		
		public System.Data.Linq.Table<KhanhHang> KhanhHangs
		{
			get
			{
				return this.GetTable<KhanhHang>();
			}
		}
		
		public System.Data.Linq.Table<DonDatHang> DonDatHangs
		{
			get
			{
				return this.GetTable<DonDatHang>();
			}
		}
		
		public System.Data.Linq.Table<ChuDe> ChuDes
		{
			get
			{
				return this.GetTable<ChuDe>();
			}
		}
		
		public System.Data.Linq.Table<CTDatHang> CTDatHangs
		{
			get
			{
				return this.GetTable<CTDatHang>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SanPhan")]
	public partial class SanPhan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaSP;
		
		private string _TenSP;
		
		private System.Nullable<double> _Gia;
		
		private string _Mota;
		
		private string _AnhSP;
		
		private System.Nullable<int> _MaLoai;
		
		private System.Nullable<System.DateTime> _NgayUpdate;
		
		private System.Nullable<int> _Soluong;
		
		private System.Nullable<int> _MaCD;
		
		private System.Nullable<int> _MaMau;
		
		private EntitySet<CTDatHang> _CTDatHangs;
		
		private EntityRef<MauSac> _MauSac;
		
		private EntityRef<LoaiSP> _LoaiSP;
		
		private EntityRef<ChuDe> _ChuDe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSPChanging(int value);
    partial void OnMaSPChanged();
    partial void OnTenSPChanging(string value);
    partial void OnTenSPChanged();
    partial void OnGiaChanging(System.Nullable<double> value);
    partial void OnGiaChanged();
    partial void OnMotaChanging(string value);
    partial void OnMotaChanged();
    partial void OnAnhSPChanging(string value);
    partial void OnAnhSPChanged();
    partial void OnMaLoaiChanging(System.Nullable<int> value);
    partial void OnMaLoaiChanged();
    partial void OnNgayUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayUpdateChanged();
    partial void OnSoluongChanging(System.Nullable<int> value);
    partial void OnSoluongChanged();
    partial void OnMaCDChanging(System.Nullable<int> value);
    partial void OnMaCDChanged();
    partial void OnMaMauChanging(System.Nullable<int> value);
    partial void OnMaMauChanged();
    #endregion
		
		public SanPhan()
		{
			this._CTDatHangs = new EntitySet<CTDatHang>(new Action<CTDatHang>(this.attach_CTDatHangs), new Action<CTDatHang>(this.detach_CTDatHangs));
			this._MauSac = default(EntityRef<MauSac>);
			this._LoaiSP = default(EntityRef<LoaiSP>);
			this._ChuDe = default(EntityRef<ChuDe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaSP
		{
			get
			{
				return this._MaSP;
			}
			set
			{
				if ((this._MaSP != value))
				{
					this.OnMaSPChanging(value);
					this.SendPropertyChanging();
					this._MaSP = value;
					this.SendPropertyChanged("MaSP");
					this.OnMaSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenSP", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenSP
		{
			get
			{
				return this._TenSP;
			}
			set
			{
				if ((this._TenSP != value))
				{
					this.OnTenSPChanging(value);
					this.SendPropertyChanging();
					this._TenSP = value;
					this.SendPropertyChanged("TenSP");
					this.OnTenSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gia", DbType="Float")]
		public System.Nullable<double> Gia
		{
			get
			{
				return this._Gia;
			}
			set
			{
				if ((this._Gia != value))
				{
					this.OnGiaChanging(value);
					this.SendPropertyChanging();
					this._Gia = value;
					this.SendPropertyChanged("Gia");
					this.OnGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mota", DbType="NVarChar(MAX)")]
		public string Mota
		{
			get
			{
				return this._Mota;
			}
			set
			{
				if ((this._Mota != value))
				{
					this.OnMotaChanging(value);
					this.SendPropertyChanging();
					this._Mota = value;
					this.SendPropertyChanged("Mota");
					this.OnMotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnhSP", DbType="VarChar(50)")]
		public string AnhSP
		{
			get
			{
				return this._AnhSP;
			}
			set
			{
				if ((this._AnhSP != value))
				{
					this.OnAnhSPChanging(value);
					this.SendPropertyChanging();
					this._AnhSP = value;
					this.SendPropertyChanged("AnhSP");
					this.OnAnhSPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoai", DbType="Int")]
		public System.Nullable<int> MaLoai
		{
			get
			{
				return this._MaLoai;
			}
			set
			{
				if ((this._MaLoai != value))
				{
					if (this._LoaiSP.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaLoaiChanging(value);
					this.SendPropertyChanging();
					this._MaLoai = value;
					this.SendPropertyChanged("MaLoai");
					this.OnMaLoaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayUpdate", DbType="Date")]
		public System.Nullable<System.DateTime> NgayUpdate
		{
			get
			{
				return this._NgayUpdate;
			}
			set
			{
				if ((this._NgayUpdate != value))
				{
					this.OnNgayUpdateChanging(value);
					this.SendPropertyChanging();
					this._NgayUpdate = value;
					this.SendPropertyChanged("NgayUpdate");
					this.OnNgayUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Soluong", DbType="Int")]
		public System.Nullable<int> Soluong
		{
			get
			{
				return this._Soluong;
			}
			set
			{
				if ((this._Soluong != value))
				{
					this.OnSoluongChanging(value);
					this.SendPropertyChanging();
					this._Soluong = value;
					this.SendPropertyChanged("Soluong");
					this.OnSoluongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCD", DbType="Int")]
		public System.Nullable<int> MaCD
		{
			get
			{
				return this._MaCD;
			}
			set
			{
				if ((this._MaCD != value))
				{
					if (this._ChuDe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaCDChanging(value);
					this.SendPropertyChanging();
					this._MaCD = value;
					this.SendPropertyChanged("MaCD");
					this.OnMaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaMau", DbType="Int")]
		public System.Nullable<int> MaMau
		{
			get
			{
				return this._MaMau;
			}
			set
			{
				if ((this._MaMau != value))
				{
					if (this._MauSac.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaMauChanging(value);
					this.SendPropertyChanging();
					this._MaMau = value;
					this.SendPropertyChanged("MaMau");
					this.OnMaMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SanPhan_CTDatHang", Storage="_CTDatHangs", ThisKey="MaSP", OtherKey="MaSp")]
		public EntitySet<CTDatHang> CTDatHangs
		{
			get
			{
				return this._CTDatHangs;
			}
			set
			{
				this._CTDatHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MauSac_SanPhan", Storage="_MauSac", ThisKey="MaMau", OtherKey="MaMau", IsForeignKey=true)]
		public MauSac MauSac
		{
			get
			{
				return this._MauSac.Entity;
			}
			set
			{
				MauSac previousValue = this._MauSac.Entity;
				if (((previousValue != value) 
							|| (this._MauSac.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MauSac.Entity = null;
						previousValue.SanPhans.Remove(this);
					}
					this._MauSac.Entity = value;
					if ((value != null))
					{
						value.SanPhans.Add(this);
						this._MaMau = value.MaMau;
					}
					else
					{
						this._MaMau = default(Nullable<int>);
					}
					this.SendPropertyChanged("MauSac");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiSP_SanPhan", Storage="_LoaiSP", ThisKey="MaLoai", OtherKey="MaLoai", IsForeignKey=true)]
		public LoaiSP LoaiSP
		{
			get
			{
				return this._LoaiSP.Entity;
			}
			set
			{
				LoaiSP previousValue = this._LoaiSP.Entity;
				if (((previousValue != value) 
							|| (this._LoaiSP.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoaiSP.Entity = null;
						previousValue.SanPhans.Remove(this);
					}
					this._LoaiSP.Entity = value;
					if ((value != null))
					{
						value.SanPhans.Add(this);
						this._MaLoai = value.MaLoai;
					}
					else
					{
						this._MaLoai = default(Nullable<int>);
					}
					this.SendPropertyChanged("LoaiSP");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuDe_SanPhan", Storage="_ChuDe", ThisKey="MaCD", OtherKey="MaCD", IsForeignKey=true)]
		public ChuDe ChuDe
		{
			get
			{
				return this._ChuDe.Entity;
			}
			set
			{
				ChuDe previousValue = this._ChuDe.Entity;
				if (((previousValue != value) 
							|| (this._ChuDe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChuDe.Entity = null;
						previousValue.SanPhans.Remove(this);
					}
					this._ChuDe.Entity = value;
					if ((value != null))
					{
						value.SanPhans.Add(this);
						this._MaCD = value.MaCD;
					}
					else
					{
						this._MaCD = default(Nullable<int>);
					}
					this.SendPropertyChanged("ChuDe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTDatHangs(CTDatHang entity)
		{
			this.SendPropertyChanging();
			entity.SanPhan = this;
		}
		
		private void detach_CTDatHangs(CTDatHang entity)
		{
			this.SendPropertyChanging();
			entity.SanPhan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MauSac")]
	public partial class MauSac : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaMau;
		
		private string _TenMau;
		
		private EntitySet<SanPhan> _SanPhans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaMauChanging(int value);
    partial void OnMaMauChanged();
    partial void OnTenMauChanging(string value);
    partial void OnTenMauChanged();
    #endregion
		
		public MauSac()
		{
			this._SanPhans = new EntitySet<SanPhan>(new Action<SanPhan>(this.attach_SanPhans), new Action<SanPhan>(this.detach_SanPhans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaMau", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaMau
		{
			get
			{
				return this._MaMau;
			}
			set
			{
				if ((this._MaMau != value))
				{
					this.OnMaMauChanging(value);
					this.SendPropertyChanging();
					this._MaMau = value;
					this.SendPropertyChanged("MaMau");
					this.OnMaMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenMau", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenMau
		{
			get
			{
				return this._TenMau;
			}
			set
			{
				if ((this._TenMau != value))
				{
					this.OnTenMauChanging(value);
					this.SendPropertyChanging();
					this._TenMau = value;
					this.SendPropertyChanged("TenMau");
					this.OnTenMauChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MauSac_SanPhan", Storage="_SanPhans", ThisKey="MaMau", OtherKey="MaMau")]
		public EntitySet<SanPhan> SanPhans
		{
			get
			{
				return this._SanPhans;
			}
			set
			{
				this._SanPhans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.MauSac = this;
		}
		
		private void detach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.MauSac = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoaiSP")]
	public partial class LoaiSP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaLoai;
		
		private string _TenLoai;
		
		private EntitySet<SanPhan> _SanPhans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaLoaiChanging(int value);
    partial void OnMaLoaiChanged();
    partial void OnTenLoaiChanging(string value);
    partial void OnTenLoaiChanged();
    #endregion
		
		public LoaiSP()
		{
			this._SanPhans = new EntitySet<SanPhan>(new Action<SanPhan>(this.attach_SanPhans), new Action<SanPhan>(this.detach_SanPhans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaLoai", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaLoai
		{
			get
			{
				return this._MaLoai;
			}
			set
			{
				if ((this._MaLoai != value))
				{
					this.OnMaLoaiChanging(value);
					this.SendPropertyChanging();
					this._MaLoai = value;
					this.SendPropertyChanged("MaLoai");
					this.OnMaLoaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenLoai", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenLoai
		{
			get
			{
				return this._TenLoai;
			}
			set
			{
				if ((this._TenLoai != value))
				{
					this.OnTenLoaiChanging(value);
					this.SendPropertyChanging();
					this._TenLoai = value;
					this.SendPropertyChanged("TenLoai");
					this.OnTenLoaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoaiSP_SanPhan", Storage="_SanPhans", ThisKey="MaLoai", OtherKey="MaLoai")]
		public EntitySet<SanPhan> SanPhans
		{
			get
			{
				return this._SanPhans;
			}
			set
			{
				this._SanPhans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.LoaiSP = this;
		}
		
		private void detach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.LoaiSP = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhanhHang")]
	public partial class KhanhHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaKH;
		
		private string _HoTen;
		
		private string _TaiKhoan;
		
		private string _Password;
		
		private string _Email;
		
		private string _DiaChi;
		
		private string _DT;
		
		private EntitySet<DonDatHang> _DonDatHangs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaKHChanging(int value);
    partial void OnMaKHChanged();
    partial void OnHoTenChanging(string value);
    partial void OnHoTenChanged();
    partial void OnTaiKhoanChanging(string value);
    partial void OnTaiKhoanChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDiaChiChanging(string value);
    partial void OnDiaChiChanged();
    partial void OnDTChanging(string value);
    partial void OnDTChanged();
    #endregion
		
		public KhanhHang()
		{
			this._DonDatHangs = new EntitySet<DonDatHang>(new Action<DonDatHang>(this.attach_DonDatHangs), new Action<DonDatHang>(this.detach_DonDatHangs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaKH
		{
			get
			{
				return this._MaKH;
			}
			set
			{
				if ((this._MaKH != value))
				{
					this.OnMaKHChanging(value);
					this.SendPropertyChanging();
					this._MaKH = value;
					this.SendPropertyChanged("MaKH");
					this.OnMaKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoTen", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string HoTen
		{
			get
			{
				return this._HoTen;
			}
			set
			{
				if ((this._HoTen != value))
				{
					this.OnHoTenChanging(value);
					this.SendPropertyChanging();
					this._HoTen = value;
					this.SendPropertyChanged("HoTen");
					this.OnHoTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaiKhoan", DbType="NVarChar(50)")]
		public string TaiKhoan
		{
			get
			{
				return this._TaiKhoan;
			}
			set
			{
				if ((this._TaiKhoan != value))
				{
					this.OnTaiKhoanChanging(value);
					this.SendPropertyChanging();
					this._TaiKhoan = value;
					this.SendPropertyChanged("TaiKhoan");
					this.OnTaiKhoanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaChi", DbType="NVarChar(150)")]
		public string DiaChi
		{
			get
			{
				return this._DiaChi;
			}
			set
			{
				if ((this._DiaChi != value))
				{
					this.OnDiaChiChanging(value);
					this.SendPropertyChanging();
					this._DiaChi = value;
					this.SendPropertyChanged("DiaChi");
					this.OnDiaChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DT", DbType="VarChar(50)")]
		public string DT
		{
			get
			{
				return this._DT;
			}
			set
			{
				if ((this._DT != value))
				{
					this.OnDTChanging(value);
					this.SendPropertyChanging();
					this._DT = value;
					this.SendPropertyChanged("DT");
					this.OnDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhanhHang_DonDatHang", Storage="_DonDatHangs", ThisKey="MaKH", OtherKey="MaKH")]
		public EntitySet<DonDatHang> DonDatHangs
		{
			get
			{
				return this._DonDatHangs;
			}
			set
			{
				this._DonDatHangs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DonDatHangs(DonDatHang entity)
		{
			this.SendPropertyChanging();
			entity.KhanhHang = this;
		}
		
		private void detach_DonDatHangs(DonDatHang entity)
		{
			this.SendPropertyChanging();
			entity.KhanhHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonDatHang")]
	public partial class DonDatHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoDH;
		
		private System.Nullable<int> _MaKH;
		
		private System.Nullable<System.DateTime> _NgayDH;
		
		private System.Nullable<System.DateTime> _NgayGiao;
		
		private System.Nullable<bool> _DaThanhToan;
		
		private System.Nullable<bool> _Tinhtranggiaohang;
		
		private EntitySet<CTDatHang> _CTDatHangs;
		
		private EntityRef<KhanhHang> _KhanhHang;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoDHChanging(int value);
    partial void OnSoDHChanged();
    partial void OnMaKHChanging(System.Nullable<int> value);
    partial void OnMaKHChanged();
    partial void OnNgayDHChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayDHChanged();
    partial void OnNgayGiaoChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayGiaoChanged();
    partial void OnDaThanhToanChanging(System.Nullable<bool> value);
    partial void OnDaThanhToanChanged();
    partial void OnTinhtranggiaohangChanging(System.Nullable<bool> value);
    partial void OnTinhtranggiaohangChanged();
    #endregion
		
		public DonDatHang()
		{
			this._CTDatHangs = new EntitySet<CTDatHang>(new Action<CTDatHang>(this.attach_CTDatHangs), new Action<CTDatHang>(this.detach_CTDatHangs));
			this._KhanhHang = default(EntityRef<KhanhHang>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SoDH
		{
			get
			{
				return this._SoDH;
			}
			set
			{
				if ((this._SoDH != value))
				{
					this.OnSoDHChanging(value);
					this.SendPropertyChanging();
					this._SoDH = value;
					this.SendPropertyChanged("SoDH");
					this.OnSoDHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKH", DbType="Int")]
		public System.Nullable<int> MaKH
		{
			get
			{
				return this._MaKH;
			}
			set
			{
				if ((this._MaKH != value))
				{
					if (this._KhanhHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaKHChanging(value);
					this.SendPropertyChanging();
					this._MaKH = value;
					this.SendPropertyChanged("MaKH");
					this.OnMaKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayDH", DbType="Date")]
		public System.Nullable<System.DateTime> NgayDH
		{
			get
			{
				return this._NgayDH;
			}
			set
			{
				if ((this._NgayDH != value))
				{
					this.OnNgayDHChanging(value);
					this.SendPropertyChanging();
					this._NgayDH = value;
					this.SendPropertyChanged("NgayDH");
					this.OnNgayDHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayGiao", DbType="Date")]
		public System.Nullable<System.DateTime> NgayGiao
		{
			get
			{
				return this._NgayGiao;
			}
			set
			{
				if ((this._NgayGiao != value))
				{
					this.OnNgayGiaoChanging(value);
					this.SendPropertyChanging();
					this._NgayGiao = value;
					this.SendPropertyChanged("NgayGiao");
					this.OnNgayGiaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaThanhToan", DbType="Bit")]
		public System.Nullable<bool> DaThanhToan
		{
			get
			{
				return this._DaThanhToan;
			}
			set
			{
				if ((this._DaThanhToan != value))
				{
					this.OnDaThanhToanChanging(value);
					this.SendPropertyChanging();
					this._DaThanhToan = value;
					this.SendPropertyChanged("DaThanhToan");
					this.OnDaThanhToanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tinhtranggiaohang", DbType="Bit")]
		public System.Nullable<bool> Tinhtranggiaohang
		{
			get
			{
				return this._Tinhtranggiaohang;
			}
			set
			{
				if ((this._Tinhtranggiaohang != value))
				{
					this.OnTinhtranggiaohangChanging(value);
					this.SendPropertyChanging();
					this._Tinhtranggiaohang = value;
					this.SendPropertyChanged("Tinhtranggiaohang");
					this.OnTinhtranggiaohangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonDatHang_CTDatHang", Storage="_CTDatHangs", ThisKey="SoDH", OtherKey="SoDH")]
		public EntitySet<CTDatHang> CTDatHangs
		{
			get
			{
				return this._CTDatHangs;
			}
			set
			{
				this._CTDatHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhanhHang_DonDatHang", Storage="_KhanhHang", ThisKey="MaKH", OtherKey="MaKH", IsForeignKey=true)]
		public KhanhHang KhanhHang
		{
			get
			{
				return this._KhanhHang.Entity;
			}
			set
			{
				KhanhHang previousValue = this._KhanhHang.Entity;
				if (((previousValue != value) 
							|| (this._KhanhHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhanhHang.Entity = null;
						previousValue.DonDatHangs.Remove(this);
					}
					this._KhanhHang.Entity = value;
					if ((value != null))
					{
						value.DonDatHangs.Add(this);
						this._MaKH = value.MaKH;
					}
					else
					{
						this._MaKH = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhanhHang");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CTDatHangs(CTDatHang entity)
		{
			this.SendPropertyChanging();
			entity.DonDatHang = this;
		}
		
		private void detach_CTDatHangs(CTDatHang entity)
		{
			this.SendPropertyChanging();
			entity.DonDatHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChuDe")]
	public partial class ChuDe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaCD;
		
		private string _TenChuDe;
		
		private EntitySet<SanPhan> _SanPhans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaCDChanging(int value);
    partial void OnMaCDChanged();
    partial void OnTenChuDeChanging(string value);
    partial void OnTenChuDeChanged();
    #endregion
		
		public ChuDe()
		{
			this._SanPhans = new EntitySet<SanPhan>(new Action<SanPhan>(this.attach_SanPhans), new Action<SanPhan>(this.detach_SanPhans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaCD
		{
			get
			{
				return this._MaCD;
			}
			set
			{
				if ((this._MaCD != value))
				{
					this.OnMaCDChanging(value);
					this.SendPropertyChanging();
					this._MaCD = value;
					this.SendPropertyChanged("MaCD");
					this.OnMaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenChuDe", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenChuDe
		{
			get
			{
				return this._TenChuDe;
			}
			set
			{
				if ((this._TenChuDe != value))
				{
					this.OnTenChuDeChanging(value);
					this.SendPropertyChanging();
					this._TenChuDe = value;
					this.SendPropertyChanged("TenChuDe");
					this.OnTenChuDeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChuDe_SanPhan", Storage="_SanPhans", ThisKey="MaCD", OtherKey="MaCD")]
		public EntitySet<SanPhan> SanPhans
		{
			get
			{
				return this._SanPhans;
			}
			set
			{
				this._SanPhans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.ChuDe = this;
		}
		
		private void detach_SanPhans(SanPhan entity)
		{
			this.SendPropertyChanging();
			entity.ChuDe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CTDatHang")]
	public partial class CTDatHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SoDH;
		
		private int _MaSp;
		
		private System.Nullable<int> _Soluong;
		
		private System.Nullable<double> _DonGia;
		
		private EntityRef<DonDatHang> _DonDatHang;
		
		private EntityRef<SanPhan> _SanPhan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoDHChanging(int value);
    partial void OnSoDHChanged();
    partial void OnMaSpChanging(int value);
    partial void OnMaSpChanged();
    partial void OnSoluongChanging(System.Nullable<int> value);
    partial void OnSoluongChanged();
    partial void OnDonGiaChanging(System.Nullable<double> value);
    partial void OnDonGiaChanged();
    #endregion
		
		public CTDatHang()
		{
			this._DonDatHang = default(EntityRef<DonDatHang>);
			this._SanPhan = default(EntityRef<SanPhan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SoDH
		{
			get
			{
				return this._SoDH;
			}
			set
			{
				if ((this._SoDH != value))
				{
					if (this._DonDatHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSoDHChanging(value);
					this.SendPropertyChanging();
					this._SoDH = value;
					this.SendPropertyChanged("SoDH");
					this.OnSoDHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSp", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MaSp
		{
			get
			{
				return this._MaSp;
			}
			set
			{
				if ((this._MaSp != value))
				{
					if (this._SanPhan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaSpChanging(value);
					this.SendPropertyChanging();
					this._MaSp = value;
					this.SendPropertyChanged("MaSp");
					this.OnMaSpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Soluong", DbType="Int")]
		public System.Nullable<int> Soluong
		{
			get
			{
				return this._Soluong;
			}
			set
			{
				if ((this._Soluong != value))
				{
					this.OnSoluongChanging(value);
					this.SendPropertyChanging();
					this._Soluong = value;
					this.SendPropertyChanged("Soluong");
					this.OnSoluongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DonGia", DbType="Float")]
		public System.Nullable<double> DonGia
		{
			get
			{
				return this._DonGia;
			}
			set
			{
				if ((this._DonGia != value))
				{
					this.OnDonGiaChanging(value);
					this.SendPropertyChanging();
					this._DonGia = value;
					this.SendPropertyChanged("DonGia");
					this.OnDonGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonDatHang_CTDatHang", Storage="_DonDatHang", ThisKey="SoDH", OtherKey="SoDH", IsForeignKey=true)]
		public DonDatHang DonDatHang
		{
			get
			{
				return this._DonDatHang.Entity;
			}
			set
			{
				DonDatHang previousValue = this._DonDatHang.Entity;
				if (((previousValue != value) 
							|| (this._DonDatHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonDatHang.Entity = null;
						previousValue.CTDatHangs.Remove(this);
					}
					this._DonDatHang.Entity = value;
					if ((value != null))
					{
						value.CTDatHangs.Add(this);
						this._SoDH = value.SoDH;
					}
					else
					{
						this._SoDH = default(int);
					}
					this.SendPropertyChanged("DonDatHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SanPhan_CTDatHang", Storage="_SanPhan", ThisKey="MaSp", OtherKey="MaSP", IsForeignKey=true)]
		public SanPhan SanPhan
		{
			get
			{
				return this._SanPhan.Entity;
			}
			set
			{
				SanPhan previousValue = this._SanPhan.Entity;
				if (((previousValue != value) 
							|| (this._SanPhan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SanPhan.Entity = null;
						previousValue.CTDatHangs.Remove(this);
					}
					this._SanPhan.Entity = value;
					if ((value != null))
					{
						value.CTDatHangs.Add(this);
						this._MaSp = value.MaSP;
					}
					else
					{
						this._MaSp = default(int);
					}
					this.SendPropertyChanged("SanPhan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
